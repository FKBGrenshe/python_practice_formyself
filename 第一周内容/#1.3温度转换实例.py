#1.3温度转换实例
#1.3”温度转换“问题分析——实例1
'''
(1)分析-摄氏度与华氏度的转换
理解1-直接讲温度只进行转换
理解2-降温度信息发布的声音或图像形式进行理解和转换
理解3-监控温度信息发不去到，实时获取并转换温度值
本次运用理解1
(2)IPO
输入-带华氏温度或摄氏温度标志的温度值_标识放在温度之后-F表示华氏温度、C表示摄氏温度
处理-根据温度标志选择适当的温度转换算法_C=(F-32)/1.8、F=C*1.8+32
输出-带摄氏温度或华氏温度的温度值
'''
TempStr = input("请输入带有符号的温度值：")
if TempStr[-1] in ['F','f']: 
    C = (eval(TempStr[0:-1]) - 32)/1.8
    print("转换后的温度是{:.2f}c".format(C))
elif TempStr[-1] in ['C','c']:
    F = 1.8*eval(TempStr[0:-1])+32
    print("转换后的温度是{:.2f}F".format(F))
else:
    print("输入格式错误")
'''
程序分析：
1.格式框架
    缩进
    1.严格明确-缩进是Python语法的一部分,缩进不正确程序运行错误
    2.所属关系-缩进是Python表达代码间包含和层次关系的唯一手段
    3.长度一致-程序内一致即可,一般为4个空格键或1个TAB键
2.注释
    1.单行注释-以#开头,其后内容为注释
    2.多行注释-以3个单引号开头,以3个单引号结尾
3.命名与保留字
    1.变量-程序中用于保存和表示数据的占位符号
        (e.g. TempStr是变量名字 用来表达温度字符的信息)
        使用等号(=)来为变量赋值,单一等号被称为赋值符号
            (e.g.TempStr = 82F-含义'向变量TempStr赋值82F的字符串')
    2.命名-为变量关联标识符的过程
        1.命名规则:大小写字母、数字、下划线、汉字等字符及组合
            注意:区分大小写、首字母不能为数字、不能与保留字相同
            1.保留字:被编程语言内部定义并保留使用的标识符
            (Python语言有33个保留字/关键字)
            2.保留字总览:
                1.基础保留字(python基础语法体系课程会涉及的保留字)
                    and as break continue def elif else except finally for from if import in lambda not or pass return try while del global True(真) False(假) None
                2.其他保留字(Python基础语法体系课程不会涉及到保留字)
                    assert class is raise with yield nonlocal
    3.数据类型
        1.数字类型
            1.整数类型(数学中的整数)
            (e.g. 10011101)
            2.浮点数类型(数学中的实数,带有小数部分)
            (e.g. 1.8)
        2.字符串类型(e.g. "10,011,101" or '10,011,101' 字符串类型要加双引号或单引号) 
            1.定义:由0个或多个字符组成的有序字符序列
            2.字符串的序号
                正向递增序号
                   从左往右,由第0个字符开始递增(0\1\2\3...)
                反向递减序号
                    从右往左,由第-1个字符开始递减(...\-3\-2\-1)
            3.字符串的索引和切片操作(使用[]获取字符串中一个或多个字符)
                索引:返回字符串中单个字符  <字符串>[M]
                (e.g. TempStr[-1] 获取TempStr变量字符串的倒数第一个字符)
                切片:只返回字符串中一段字符子串  <字符串>[M:N]
                (e.g. TempStr[0:-1] 从0开始但是不到最后一个字符的字符子串)
        3.列表类型
            1.定义 由0个或多个数据组成的有序数列
            2.用法 使用[]表示, 采用','逗号分隔各元素
            (e.g. [10,011,101] 表示三个整数元素:10 \ 011 \ 101)
            3.使用保留字 in 判断一个元素是否在列表中
            如果正确则返回True真值;如果错误则返回False假值
            (e.g. TempStr[-1] in ['C' , 'c'] 表示: TempStr的最后一个字符是不是C或c中的一个)
    4.语句与函数
        1.语句
            1.赋值语句: 由赋值符号构成的一行代码
                (赋值语句 用来给变量赋予新的数据值)
                (赋值语句右侧的数据类型同时作用于变量)
            2.分支语句:由判断条件决定程序运行方向的语句
                1.使用保留字if elif else 构成条件判断的分支结构
                    ( if TempStr[-1] in ['F' , 'f']: 如果条件为真,则执行冒号:后缩进语句)
                    冒号:及后续缩进用来表示后续语句与条件的所属关系
        2.函数:根据输入参数产生不同的输出的功能过程
            1. 形式:  <函数名>(<参数>) 
                (e.g. eval(TempStr[0:-1]) 此处, TempStr[0:-1] 是参数)
    5.输入输出
        1.输入
            input()从控制台获得拥护输入的函数
                1.使用格式:  <变量> = input(<提示信息字符串>)
                    用户输入的信息以 "字符串"类型 保存在 <变量> 中
                    (e.g. TempStr = input("请输入带有符号的温度值：") 用户输入的信息以 "字符串"类型 保存在 TempStr 中)
        2.输出
            print()以字符形式向控制台输出结果的函数
                1.使用格式: 
                print(<拟输出字符串或字符串变量>)
                (e.g. print("输入格式错误") 向控制台输出 输入格式错误)
                print()函数的格式化
                (e.g. print("转换后的温度是{:.2f}c".format(C)) 将format(c) 的变量c的值 按取到小数点后2位的格式 填充到{:.2f}中)
        3.eval函数: 去掉参数最外侧引号,并执行其他语句的函数
            1.使用格式: eval(<字符串/字符串变量>)
            (e.g. eval("1")  结果为 1 )
            (e.g. eval("1+2") 结果为 1+2 Python理解语句1+2并输出 3 )
            (e.g. eval("'1+2'") 结果为 "1+2")
            (e.g. eval('print("hello")') 结果为 print("hello") Python理解语句print("hello")并输出 hello )


'''